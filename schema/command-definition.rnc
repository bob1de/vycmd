#    command-definition.rnc: VyCmd reference tree XML grammar
#
#    Copyright (C) 2020 VyOS maintainers and contributors <maintainers@vyos.net>
#
#    This library is free software; you can redistribute it and/or
#    modify it under the terms of the GNU Lesser General Public
#    License as published by the Free Software Foundation; either
#    version 2.1 of the License, or (at your option) any later version.
#
#    This library is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public
#    License along with this library; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301
#    USA

# The language of this file is compact form RELAX-NG
# http://relaxng.org/compact-tutorial-20030326.htm
# (unless converted to XML, then just RELAX-NG :)

# It starts with the commandDefinition tag that may contain nodes and, optionally,
# an input node
start = element commandDefinition
{
    node* &
    inputNode?
}

node = element node
{
    # Regular nodes must have a fixed name
    attribute name { text },
    commonNodeProperties
}

# Input nodes have no predefined names and serve as placeholder, like network
# interface names or usernames.
inputNode = element inputNode
{
    commonNodeProperties,
    completionHelp*
}


##### Node properties

# These are properties of both node and inputNode tags
commonNodeProperties = (
    # The help tag may provide a short description of the purpose of the node
    (element help { text })? &
    call? &
    children?
)

# Defines the action to run when this node gets called
call = element call
{
    # Register a Python handler class by its full import path, like so:
    # 'package.subpackage.module:class'
    element python { text } |
    # Or alternatively, define a shell-command to run
    element shell {
        # When this is enabled, the command is assumed to require user input
        # on stdin and thus can't run headless. This must also be set for commands
        # which generate non-UTF-8 output.
        (attribute interactive { xsd:boolean })?,
        text
    }
}

# Each node may have multiple nodes and, optionally, a single input node as children
children = element children
{
    node* &
    inputNode?
}


##### Input node extra properties

# completionHelp tags contain information about allowed values of an input node that
# is used for generating tab completion in CLI and drop-down lists in GUI frontends
completionHelp = element completionHelp
{
    # Offer the nodes/values found under this space-separated config path as hints
    (element config { text })* &
    # Add a static text to the list of completion hints
    (element item { text })* &
    # Offer the list returned by this Python callable as completion hints;
    # the callable has to be specified in dotted full import path syntax:
    # - 'package.module.list_things'
    (element python { text })* &
    # Offer the lines this shell command outputs as completion hints
    (element shell { text })*
}
